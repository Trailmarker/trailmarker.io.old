{"version":3,"sources":["shadow/test/env.cljs"],"sourcesContent":["(ns shadow.test.env)\n\n;; this should be how cljs.test works out of the box IMHO\n;; all those macros don't compose and make writing testing utilities painful\n;; (eg. you have to recompile the namespace containing the macro to pick up new tests)\n;; only the macros were replaced, the functionality remains unchanged\n(defonce tests-ref (atom {:namespaces {}}))\n\n(when-not (:hooked @tests-ref)\n  ;; we want to remove all tests when a ns is reloaded\n  ;; since otherwise deleted tests stay in the atom\n  ;; the event is dispatched by shadow.cljs.devtools.client.env\n  ;; right before the source is loaded\n  (let [event-fn\n        (fn [ns]\n          (swap! tests-ref update :namespaces dissoc ns))]\n\n    (if-not js/goog.global.SHADOW_NS_RESET\n      (set! js/goog.global.SHADOW_NS_RESET [event-fn])\n      (set! js/goog.global.SHADOW_NS_RESET (conj js/goog.global.SHADOW_NS_RESET event-fn)))\n    (swap! tests-ref assoc :hooked true)))\n\n(defn register-test [test-ns test-name test-var]\n  ;; register by name so reloading replaces the old test\n  (swap! tests-ref assoc-in [:namespaces test-ns :vars test-name] test-var)\n  test-var)\n\n(defn register-fixtures [test-ns type fix]\n  (swap! tests-ref assoc-in [:namespaces test-ns :fixtures type] fix))\n\n(defn get-tests []\n  (get @tests-ref :namespaces))\n\n(defn get-test-ns-info [ns]\n  {:pre [(symbol? ns)]}\n  (get-in @tests-ref [:namespaces ns]))\n\n(defn get-test-namespaces\n  \"returns all the registered test namespaces and symbols\n   use (get-test-ns-info the-sym) to get the details\"\n  []\n  (-> @tests-ref (:namespaces) (keys)))\n\n(defn get-test-count []\n  (->> (for [{:keys [vars] :as test-ns} (-> @tests-ref (:namespaces) (vals))]\n         (count vars))\n       (reduce + 0)))"],"mappings":";;AAMA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAAA,AAAA,AAACC;;AAEpB,AAAU,AAAA,AAAA,AAAAC,AAAUF;AAApB;AAAA,AAKE,AAAM,AACA,AAAK;AAAL,AACE,AAAA,AAACG,AAAMH,AAAUI,AAAmBC,AAAOC;;AAFnD,AAIE,AAAA,AAAAC,AAAQC;AACN,AAAA,AAAMA,AAAgCC;;AACtC,AAAMD,AAA+B,AAACE,AAAKF,AAA+BC;;;AAC5E,AAAA,AAAA,AAACE,AAAMX,AAAUY;;AAErB,AAAA,AAAMC,AAAe,AAAQ,AAAU;AAAvC,AAEE,AAAA,AAAA,AAAA,AAACF,AAAMX,AAAUc,AAAsBC,AAAcC,AAAWC;;AAChEA;;AAEF,AAAA,AAAMC,AAAmB,AAAQ,AAAK;AAAtC,AACE,AAAA,AAAA,AAAA,AAACP,AAAMX,AAAUc,AAAsBC,AAAkBI,AAAMC;;AAEjE,AAAA,AAAMC;AAAN,AACE,AAAA,AAAAnB,AAAA,AAACoB,AAAKtB;;AAER,AAAA,AAAMwB,AAAkB;AAAxB,AAAA,AACS,AAAAC,AAASnB;AADlB;AAAA,AAAA,AAAA,AAAAiB,AAAA;;;AAEE,AAAA,AAAArB,AAAA,AAAA,AAACwB,AAAQ1B,AAAuBM;;AAElC;;;;AAAA,AAAMqB;AAAN,AAIO3B,AAAU,AAAA,AAAA,AAAAE,AAAc,AAAC0B;;AAEhC,AAAA,AAAMC;AAAN,AACO,AAAA,AAAA,AAAA,AAEA,AAAA,AAAC6B,AAAOC;AAFR,AAAA,AAAA7B,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAo0E4C,AAAA6B,AAAA7B;AAp0E5C,AAAA,AAAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAE,AAAAJ,AAAAG;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAwB;AAAxB,AAAAnB,AAAAmB,AAAA,AAAc;AAAd,AAAA,AAAA,AAAAI,AAAAC,AACE,AAACX,AAAMsB;;AADT,AAAA,AAAAlB,AAAA;;;;AAAA;;;;;AAAA,AAAAQ,AAAA,AAAAC,AAAAF,AAAA,AAAAG,AAAA,AAAAC,AAAAnB;;AAAA,AAAAgB,AAAA,AAAAC,AAAAF,AAAA;;;AAAA,AAAA,AAAA,AAAAK,AAAApB;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAAA,AAAwB;AAAxB,AAAA9B,AAAA8B,AAAA,AAAc;AAAd,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAAK,AAAAvB,AACE,AAACI,AAAMsB;;;AADT;;;;AAAA,AAAA;;AAAA,AAAA,AAAAF,AAAsCvD,AAAU,AAAA,AAAA,AAAAE,AAAc,AAACsD","names":["js/shadow","js/shadow.test","js/shadow.test.env","js/shadow.test.env.tests-ref","shadow.test.env/tests-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/dissoc","ns","cljs.core/not","js/goog.global.SHADOW_NS_RESET","event-fn","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","shadow.test.env/register-test","cljs.core/assoc-in","test-ns","test-name","test-var","shadow.test.env/register-fixtures","type","fix","shadow.test.env/get-tests","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","shadow.test.env/get-test-ns-info","cljs.core/Symbol","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","shadow.test.env/get-test-namespaces","cljs.core/keys","shadow.test.env/get-test-count","cljs.core/LazySeq","s__10951","cljs.core/seq","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/count","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__10956","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","map__10960","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/chunk-append","b__10957","cljs.core/chunk-cons","cljs.core/chunk","iter__10950","cljs.core/chunk-rest","cljs.core/first","map__10967","cljs.core/cons","cljs.core/rest","iter__4434__auto__","cljs.core/vals","vars","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/chunk-first"]}