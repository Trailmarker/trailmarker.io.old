{
"version":3,
"file":"module$node_modules$$turf$helpers$main.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/@turf/helpers/main.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$turf$helpers$main\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n */\nvar earthRadius = 6371008.8;\n\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n */\nvar factors = {\n    meters: earthRadius,\n    metres: earthRadius,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    miles: earthRadius / 1609.344,\n    nauticalmiles: earthRadius / 1852,\n    inches: earthRadius * 39.370,\n    yards: earthRadius / 1.0936,\n    feet: earthRadius * 3.28084,\n    radians: 1,\n    degrees: earthRadius / 111325,\n};\n\n/**\n * Units of measurement factors based on 1 meter.\n */\nvar unitsFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000,\n    millimetres: 1000,\n    centimeters: 100,\n    centimetres: 100,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    miles: 1 / 1609.344,\n    nauticalmiles: 1 / 1852,\n    inches: 39.370,\n    yards: 1 / 1.0936,\n    feet: 3.28084,\n    radians: 1 / earthRadius,\n    degrees: 1 / 111325,\n};\n\n/**\n * Area of measurement factors based on 1 square meter.\n */\nvar areaFactors = {\n    meters: 1,\n    metres: 1,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    centimeters: 10000,\n    centimetres: 10000,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    acres: 0.000247105,\n    miles: 3.86e-7,\n    yards: 1.195990046,\n    feet: 10.763910417,\n    inches: 1550.003100006\n};\n\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geometry, properties, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (geometry === undefined) throw new Error('geometry is required');\n    if (properties && properties.constructor !== Object) throw new Error('properties must be an Object');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var feat = {type: 'Feature'};\n    if (id) feat.id = id;\n    if (bbox) feat.bbox = bbox;\n    feat.properties = properties || {};\n    feat.geometry = geometry;\n    return feat;\n}\n\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<number>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Geometry\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = 'Point';\n * var coordinates = [110, 50];\n *\n * var geometry = turf.geometry(type, coordinates);\n *\n * //=geometry\n */\nfunction geometry(type, coordinates, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n\n    // Validation\n    if (!type) throw new Error('type is required');\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (bbox) validateBBox(bbox);\n\n    // Main\n    var geom;\n    switch (type) {\n    case 'Point': geom = point(coordinates).geometry; break;\n    case 'LineString': geom = lineString(coordinates).geometry; break;\n    case 'Polygon': geom = polygon(coordinates).geometry; break;\n    case 'MultiPoint': geom = multiPoint(coordinates).geometry; break;\n    case 'MultiLineString': geom = multiLineString(coordinates).geometry; break;\n    case 'MultiPolygon': geom = multiPolygon(coordinates).geometry; break;\n    default: throw new Error(type + ' is invalid');\n    }\n    if (bbox) geom.bbox = bbox;\n    return geom;\n}\n\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n    if (coordinates.length < 2) throw new Error('coordinates must be at least 2 numbers long');\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'Point',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    for (var i = 0; i < coordinates.length; i++) {\n        var ring = coordinates[i];\n        if (ring.length < 4) {\n            throw new Error('Each LinearRing of a Polygon must have 4 or more Positions.');\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (i === 0 && j === 0 && !isNumber(ring[0][0]) || !isNumber(ring[0][1])) throw new Error('coordinates must contain numbers');\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error('First and last Position are not equivalent.');\n            }\n        }\n    }\n\n    return feature({\n        type: 'Polygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (coordinates.length < 2) throw new Error('coordinates must be an array of two or more positions');\n    // Check if first point of LineString contains two numbers\n    if (!isNumber(coordinates[0][1]) || !isNumber(coordinates[0][1])) throw new Error('coordinates must contain numbers');\n\n    return feature({\n        type: 'LineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<number>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n    if (!Array.isArray(coordinates)) throw new Error('coordinates must be an Array');\n\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var id = options.id;\n\n    // Validation\n    if (!features) throw new Error('No features passed');\n    if (!Array.isArray(features)) throw new Error('features must be an Array');\n    if (bbox) validateBBox(bbox);\n    if (id) validateId(id);\n\n    // Main\n    var fc = {type: 'FeatureCollection'};\n    if (id) fc.id = id;\n    if (bbox) fc.bbox = bbox;\n    fc.features = features;\n    return fc;\n}\n\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiLineString',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPoint',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (!coordinates) throw new Error('coordinates is required');\n\n    return feature({\n        type: 'MultiPolygon',\n        coordinates: coordinates\n    }, properties, options);\n}\n\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = {\n *     \"type\": \"Point\",\n *       \"coordinates\": [100, 0]\n *     };\n * var line = {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [ [101, 0], [102, 1] ]\n *   };\n * var collection = turf.geometryCollection([pt, line]);\n *\n * //=collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (!geometries) throw new Error('geometries is required');\n    if (!Array.isArray(geometries)) throw new Error('geometries must be an Array');\n\n    return feature({\n        type: 'GeometryCollection',\n        geometries: geometries\n    }, properties, options);\n}\n\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (num === undefined || num === null || isNaN(num)) throw new Error('num is required');\n    if (precision && !(precision >= 0)) throw new Error('precision must be a positive number');\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (radians === undefined || radians === null) throw new Error('radians is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return radians * factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (distance === undefined || distance === null) throw new Error('distance is required');\n\n    if (units && typeof units !== 'string') throw new Error('units must be a string');\n    var factor = factors[units || 'kilometers'];\n    if (!factor) throw new Error(units + ' units is invalid');\n    return distance / factor;\n}\n\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units='kilometers'] can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    if (bearing === null || bearing === undefined) throw new Error('bearing is required');\n\n    var angle = bearing % 360;\n    if (angle < 0) angle += 360;\n    return angle;\n}\n\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    if (radians === null || radians === undefined) throw new Error('radians is required');\n\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\n\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    if (degrees === null || degrees === undefined) throw new Error('degrees is required');\n\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\n\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {string} originalUnit of the length\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (length === null || length === undefined) throw new Error('length is required');\n    if (!(length >= 0)) throw new Error('length must be a positive number');\n\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit || 'kilometers');\n}\n\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {string} [originalUnit='meters'] of the distance\n * @param {string} [finalUnit='kilometers'] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (area === null || area === undefined) throw new Error('area is required');\n    if (!(area >= 0)) throw new Error('area must be a positive number');\n\n    var startFactor = areaFactors[originalUnit || 'meters'];\n    if (!startFactor) throw new Error('invalid original units');\n\n    var finalFactor = areaFactors[finalUnit || 'kilometers'];\n    if (!finalFactor) throw new Error('invalid final units');\n\n    return (area / startFactor) * finalFactor;\n}\n\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\n\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) throw new Error('bbox is required');\n    if (!Array.isArray(bbox)) throw new Error('bbox must be an Array');\n    if (bbox.length !== 4 && bbox.length !== 6) throw new Error('bbox must be an Array of 4 or 6 numbers');\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) throw new Error('bbox must only contain numbers');\n    });\n}\n\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) throw new Error('id is required');\n    if (['string', 'number'].indexOf(typeof id) === -1) throw new Error('id must be a number or a string');\n}\n\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error('method has been renamed to `radiansToDegrees`');\n}\n\nfunction degrees2radians() {\n    throw new Error('method has been renamed to `degreesToRadians`');\n}\n\nfunction distanceToDegrees() {\n    throw new Error('method has been renamed to `lengthToDegrees`');\n}\n\nfunction distanceToRadians() {\n    throw new Error('method has been renamed to `lengthToRadians`');\n}\n\nfunction radiansToDistance() {\n    throw new Error('method has been renamed to `radiansToLength`');\n}\n\nfunction bearingToAngle() {\n    throw new Error('method has been renamed to `bearingToAzimuth`');\n}\n\nfunction convertDistance() {\n    throw new Error('method has been renamed to `convertLength`');\n}\n\nexports.earthRadius = earthRadius;\nexports.factors = factors;\nexports.unitsFactors = unitsFactors;\nexports.areaFactors = areaFactors;\nexports.feature = feature;\nexports.geometry = geometry;\nexports.point = point;\nexports.points = points;\nexports.polygon = polygon;\nexports.polygons = polygons;\nexports.lineString = lineString;\nexports.lineStrings = lineStrings;\nexports.featureCollection = featureCollection;\nexports.multiLineString = multiLineString;\nexports.multiPoint = multiPoint;\nexports.multiPolygon = multiPolygon;\nexports.geometryCollection = geometryCollection;\nexports.round = round;\nexports.radiansToLength = radiansToLength;\nexports.lengthToRadians = lengthToRadians;\nexports.lengthToDegrees = lengthToDegrees;\nexports.bearingToAzimuth = bearingToAzimuth;\nexports.radiansToDegrees = radiansToDegrees;\nexports.degreesToRadians = degreesToRadians;\nexports.convertLength = convertLength;\nexports.convertArea = convertArea;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.validateBBox = validateBBox;\nexports.validateId = validateId;\nexports.radians2degrees = radians2degrees;\nexports.degrees2radians = degrees2radians;\nexports.distanceToDegrees = distanceToDegrees;\nexports.distanceToRadians = distanceToRadians;\nexports.radiansToDistance = radiansToDistance;\nexports.bearingToAngle = bearingToAngle;\nexports.convertDistance = convertDistance;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","feature","geometry","properties","options","isObject","Error","bbox","id","undefined","constructor","Object","validateBBox","validateId","feat","type","point","coordinates","Array","isArray","length","isNumber","polygon","i","ring","j","lineString","featureCollection","features","fc","multiLineString","multiPoint","multiPolygon","radiansToLength","radians","units","factor","factors","lengthToRadians","distance","radiansToDegrees","Math","PI","num","isNaN","input","forEach","indexOf","defineProperty","value","meters","earthRadius","metres","millimeters","millimetres","centimeters","centimetres","kilometers","kilometres","miles","nauticalmiles","inches","yards","feet","degrees","unitsFactors","areaFactors","acres","geom","points","map","coords","polygons","lineStrings","geometryCollection","geometries","round","precision","multiplier","pow","lengthToDegrees","bearingToAzimuth","bearing","angle","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","radians2degrees","degrees2radians","distanceToDegrees","distanceToRadians","radiansToDistance","bearingToAngle","convertDistance"]
}
