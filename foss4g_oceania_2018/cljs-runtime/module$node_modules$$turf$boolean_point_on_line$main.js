shadow$provide.module$node_modules$$turf$boolean_point_on_line$main=function(global,process,require,module,exports,shadow$shims){function booleanPointOnLine(pt,line,options){options=options||{};var ignoreEndVertices=options.ignoreEndVertices;if(!helpers.isObject(options))throw Error("invalid options");if(!pt)throw Error("pt is required");if(!line)throw Error("line is required");pt=invariant.getCoord(pt);line=invariant.getCoords(line);for(options=0;options<line.length-1;options++){var ignoreBoundary=
!1;ignoreEndVertices&&(0===options&&(ignoreBoundary="start"),options===line.length-2&&(ignoreBoundary="end"),0===options&&options+1===line.length-1&&(ignoreBoundary="both"));var lineSegmentStart=line[options],lineSegmentEnd=line[options+1],x=pt[0],y=pt[1],x1=lineSegmentStart[0];lineSegmentStart=lineSegmentStart[1];var x2=lineSegmentEnd[0];lineSegmentEnd=lineSegmentEnd[1];var dxl=x2-x1,dyl=lineSegmentEnd-lineSegmentStart;ignoreBoundary=0!==(pt[0]-x1)*dyl-(pt[1]-lineSegmentStart)*dxl?!1:ignoreBoundary?
"start"===ignoreBoundary?Math.abs(dxl)>=Math.abs(dyl)?0<dxl?x1<x&&x<=x2:x2<=x&&x<x1:0<dyl?lineSegmentStart<y&&y<=lineSegmentEnd:lineSegmentEnd<=y&&y<lineSegmentStart:"end"===ignoreBoundary?Math.abs(dxl)>=Math.abs(dyl)?0<dxl?x1<=x&&x<x2:x2<x&&x<=x1:0<dyl?lineSegmentStart<=y&&y<lineSegmentEnd:lineSegmentEnd<y&&y<=lineSegmentStart:"both"===ignoreBoundary?Math.abs(dxl)>=Math.abs(dyl)?0<dxl?x1<x&&x<x2:x2<x&&x<x1:0<dyl?lineSegmentStart<y&&y<lineSegmentEnd:lineSegmentEnd<y&&y<lineSegmentStart:void 0:Math.abs(dxl)>=
Math.abs(dyl)?0<dxl?x1<=x&&x<=x2:x2<=x&&x<=x1:0<dyl?lineSegmentStart<=y&&y<=lineSegmentEnd:lineSegmentEnd<=y&&y<=lineSegmentStart;if(ignoreBoundary)return!0}return!1}var invariant=require("module$node_modules$$turf$invariant$main"),helpers=require("module$node_modules$$turf$helpers$main");module.exports=booleanPointOnLine;module.exports.default=booleanPointOnLine}
//# sourceMappingURL=module$node_modules$$turf$boolean_point_on_line$main.js.map
