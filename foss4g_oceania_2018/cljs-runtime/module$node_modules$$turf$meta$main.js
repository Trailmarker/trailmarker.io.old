shadow$provide.module$node_modules$$turf$meta$main=function(global,process,require,module,exports,shadow$shims){function coordEach(geojson,callback,excludeWrapCoord){if(null!==geojson){var l,geometryMaybeCollection,coordIndex=0,isGeometryCollection;var j=geojson.type;for(var isFeatureCollection="FeatureCollection"===j,isFeature="Feature"===j,stop=isFeatureCollection?geojson.features.length:1,featureIndex=0;featureIndex<stop;featureIndex++){var stopG=(isGeometryCollection=(geometryMaybeCollection=
isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson)?"GeometryCollection"===geometryMaybeCollection.type:!1)?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex++){var multiFeatureIndex=0,geometryIndex=0;var k=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection;if(null!==k){var coords=k.coordinates;var geomType=k.type;var wrapShrink=!excludeWrapCoord||"Polygon"!==geomType&&"MultiPolygon"!==
geomType?0:1;switch(geomType){case null:break;case "Point":if(!1===callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++;break;case "LineString":case "MultiPoint":for(j=0;j<coords.length;j++){if(!1===callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++;"MultiPoint"===geomType&&multiFeatureIndex++}break;case "Polygon":case "MultiLineString":for(j=0;j<coords.length;j++){for(k=0;k<coords[j].length-wrapShrink;k++){if(!1===
callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}"MultiLineString"===geomType&&multiFeatureIndex++;"Polygon"===geomType&&geometryIndex++}break;case "MultiPolygon":for(j=0;j<coords.length;j++){"MultiPolygon"===geomType&&(geometryIndex=0);for(k=0;k<coords[j].length;k++){for(l=0;l<coords[j][k].length-wrapShrink;l++){if(!1===callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex))return!1;coordIndex++}geometryIndex++}multiFeatureIndex++}break;
case "GeometryCollection":for(j=0;j<k.geometries.length;j++)if(!1===coordEach(k.geometries[j],callback,excludeWrapCoord))return!1;break;default:throw Error("Unknown Geometry Type");}}}}}}function propEach(geojson,callback){var i;switch(geojson.type){case "FeatureCollection":for(i=0;i<geojson.features.length&&!1!==callback(geojson.features[i].properties,i);i++);break;case "Feature":callback(geojson.properties,0)}}function featureEach(geojson,callback){if("Feature"===geojson.type)callback(geojson,0);
else if("FeatureCollection"===geojson.type)for(var i=0;i<geojson.features.length&&!1!==callback(geojson.features[i],i);i++);}function geomEach(geojson,callback){var i,j,g,isGeometryCollection,featureIndex=0,isFeatureCollection="FeatureCollection"===geojson.type,isFeature="Feature"===geojson.type,stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i++){var geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson;var featureProperties=
isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{};var featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:void 0;var featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:void 0;var stopG=(isGeometryCollection=geometryMaybeCollection?"GeometryCollection"===geometryMaybeCollection.type:!1)?geometryMaybeCollection.geometries.length:1;for(g=0;g<stopG;g++){var geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:
geometryMaybeCollection;if(null===geometry){if(!1===callback(null,featureIndex,featureProperties,featureBBox,featureId))return!1}else switch(geometry.type){case "Point":case "LineString":case "MultiPoint":case "Polygon":case "MultiLineString":case "MultiPolygon":if(!1===callback(geometry,featureIndex,featureProperties,featureBBox,featureId))return!1;break;case "GeometryCollection":for(j=0;j<geometry.geometries.length;j++)if(!1===callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,
featureId))return!1;break;default:throw Error("Unknown Geometry Type");}}featureIndex++}}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var type=null===geometry?null:geometry.type;switch(type){case null:case "Point":case "LineString":case "Polygon":if(!1===callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0))return!1;return}switch(type){case "MultiPoint":var geomType="Point";break;case "MultiLineString":geomType=
"LineString";break;case "MultiPolygon":geomType="Polygon"}for(bbox=0;bbox<geometry.coordinates.length;bbox++)if(!1===callback(helpers.feature({type:geomType,coordinates:geometry.coordinates[bbox]},properties),featureIndex,bbox))return!1})}function segmentEach(geojson,callback){flattenEach(geojson,function(feature$$1,featureIndex,multiFeatureIndex){var segmentIndex=0;if(feature$$1.geometry){var type=feature$$1.geometry.type;if("Point"!==type&&"MultiPoint"!==type){var previousCoords;if(!1===coordEach(feature$$1,
function(currentCoord,coordIndex,featureIndexCoord,mutliPartIndexCoord,geometryIndex){if(void 0!==previousCoords){coordIndex=helpers.lineString([previousCoords,currentCoord],feature$$1.properties);if(!1===callback(coordIndex,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex))return!1;segmentIndex++}previousCoords=currentCoord}))return!1}}})}function lineEach(geojson,callback){if(!geojson)throw Error("geojson is required");flattenEach(geojson,function(feature$$1,featureIndex,multiFeatureIndex){if(null!==
feature$$1.geometry){var coords=feature$$1.geometry.coordinates;switch(feature$$1.geometry.type){case "LineString":if(!1===callback(feature$$1,featureIndex,multiFeatureIndex,0,0))return!1;break;case "Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex++)if(!1===callback(helpers.lineString(coords[geometryIndex],feature$$1.properties),featureIndex,multiFeatureIndex,geometryIndex))return!1}}})}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("module$node_modules$$turf$helpers$main");
exports.coordEach=coordEach;exports.coordReduce=function(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===coordIndex&&void 0===initialValue?currentCoord:callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)},excludeWrapCoord);return previousValue};exports.propEach=propEach;exports.propReduce=function(geojson,callback,
initialValue){var previousValue=initialValue;propEach(geojson,function(currentProperties,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentProperties:callback(previousValue,currentProperties,featureIndex)});return previousValue};exports.featureEach=featureEach;exports.featureReduce=function(geojson,callback,initialValue){var previousValue=initialValue;featureEach(geojson,function(currentFeature,featureIndex){previousValue=0===featureIndex&&void 0===initialValue?currentFeature:
callback(previousValue,currentFeature,featureIndex)});return previousValue};exports.coordAll=function(geojson){var coords=[];coordEach(geojson,function(coord){coords.push(coord)});return coords};exports.geomEach=geomEach;exports.geomReduce=function(geojson,callback,initialValue){var previousValue=initialValue;geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){previousValue=0===featureIndex&&void 0===initialValue?currentGeometry:callback(previousValue,currentGeometry,
featureIndex,featureProperties,featureBBox,featureId)});return previousValue};exports.flattenEach=flattenEach;exports.flattenReduce=function(geojson,callback,initialValue){var previousValue=initialValue;flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){previousValue=0===featureIndex&&0===multiFeatureIndex&&void 0===initialValue?currentFeature:callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)});return previousValue};exports.segmentEach=segmentEach;exports.segmentReduce=
function(geojson,callback,initialValue){var previousValue=initialValue,started=!1;segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){previousValue=!1===started&&void 0===initialValue?currentSegment:callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex);started=!0});return previousValue};exports.lineEach=lineEach;exports.lineReduce=function(geojson,callback,initialValue){var previousValue=initialValue;lineEach(geojson,
function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){previousValue=0===featureIndex&&void 0===initialValue?currentLine:callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)});return previousValue};exports.findSegment=function(geojson,options){options=options||{};if(!helpers.isObject(options))throw Error("options is invalid");var featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,segmentIndex=
options.segmentIndex||0,properties=options.properties;switch(geojson.type){case "FeatureCollection":0>featureIndex&&(featureIndex=geojson.features.length+featureIndex);properties=properties||geojson.features[featureIndex].properties;geojson=geojson.features[featureIndex].geometry;break;case "Feature":properties=properties||geojson.properties;geojson=geojson.geometry;break;case "Point":case "MultiPoint":return null;case "LineString":case "Polygon":case "MultiLineString":case "MultiPolygon":break;default:throw Error("geojson is invalid");
}if(null===geojson)return null;featureIndex=geojson.coordinates;switch(geojson.type){case "Point":case "MultiPoint":return null;case "LineString":return 0>segmentIndex&&(segmentIndex=featureIndex.length+segmentIndex-1),helpers.lineString([featureIndex[segmentIndex],featureIndex[segmentIndex+1]],properties,options);case "Polygon":return 0>geometryIndex&&(geometryIndex=featureIndex.length+geometryIndex),0>segmentIndex&&(segmentIndex=featureIndex[geometryIndex].length+segmentIndex-1),helpers.lineString([featureIndex[geometryIndex][segmentIndex],
featureIndex[geometryIndex][segmentIndex+1]],properties,options);case "MultiLineString":return 0>multiFeatureIndex&&(multiFeatureIndex=featureIndex.length+multiFeatureIndex),0>segmentIndex&&(segmentIndex=featureIndex[multiFeatureIndex].length+segmentIndex-1),helpers.lineString([featureIndex[multiFeatureIndex][segmentIndex],featureIndex[multiFeatureIndex][segmentIndex+1]],properties,options);case "MultiPolygon":return 0>multiFeatureIndex&&(multiFeatureIndex=featureIndex.length+multiFeatureIndex),0>
geometryIndex&&(geometryIndex=featureIndex[multiFeatureIndex].length+geometryIndex),0>segmentIndex&&(segmentIndex=featureIndex[multiFeatureIndex][geometryIndex].length-segmentIndex-1),helpers.lineString([featureIndex[multiFeatureIndex][geometryIndex][segmentIndex],featureIndex[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw Error("geojson is invalid");};exports.findPoint=function(geojson,options){options=options||{};if(!helpers.isObject(options))throw Error("options is invalid");
var featureIndex=options.featureIndex||0,multiFeatureIndex=options.multiFeatureIndex||0,geometryIndex=options.geometryIndex||0,coordIndex=options.coordIndex||0,properties=options.properties;switch(geojson.type){case "FeatureCollection":0>featureIndex&&(featureIndex=geojson.features.length+featureIndex);properties=properties||geojson.features[featureIndex].properties;geojson=geojson.features[featureIndex].geometry;break;case "Feature":properties=properties||geojson.properties;geojson=geojson.geometry;
break;case "Point":case "MultiPoint":return null;case "LineString":case "Polygon":case "MultiLineString":case "MultiPolygon":break;default:throw Error("geojson is invalid");}if(null===geojson)return null;featureIndex=geojson.coordinates;switch(geojson.type){case "Point":return helpers.point(featureIndex,properties,options);case "MultiPoint":return 0>multiFeatureIndex&&(multiFeatureIndex=featureIndex.length+multiFeatureIndex),helpers.point(featureIndex[multiFeatureIndex],properties,options);case "LineString":return 0>
coordIndex&&(coordIndex=featureIndex.length+coordIndex),helpers.point(featureIndex[coordIndex],properties,options);case "Polygon":return 0>geometryIndex&&(geometryIndex=featureIndex.length+geometryIndex),0>coordIndex&&(coordIndex=featureIndex[geometryIndex].length+coordIndex),helpers.point(featureIndex[geometryIndex][coordIndex],properties,options);case "MultiLineString":return 0>multiFeatureIndex&&(multiFeatureIndex=featureIndex.length+multiFeatureIndex),0>coordIndex&&(coordIndex=featureIndex[multiFeatureIndex].length+
coordIndex),helpers.point(featureIndex[multiFeatureIndex][coordIndex],properties,options);case "MultiPolygon":return 0>multiFeatureIndex&&(multiFeatureIndex=featureIndex.length+multiFeatureIndex),0>geometryIndex&&(geometryIndex=featureIndex[multiFeatureIndex].length+geometryIndex),0>coordIndex&&(coordIndex=featureIndex[multiFeatureIndex][geometryIndex].length-coordIndex),helpers.point(featureIndex[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw Error("geojson is invalid");
}}
//# sourceMappingURL=module$node_modules$$turf$meta$main.js.map
