{"version":3,"sources":["oops/messages.cljs"],"sourcesContent":["(ns oops.messages\n  \"A subsystem for printing runtime warnings and errors.\"\n  (:require-macros [oops.messages]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic post-process-message [msg]\n  (str (oops.messages/gen-oops-message-prefix) \", \" msg))\n\n; -- runtime error/warning messages -----------------------------------------------------------------------------------------\n\n(defmulti runtime-message (fn [type & _] type))\n\n(defmethod runtime-message :unexpected-object-value [_type info]\n  (let [{:keys [flavor path]} info]\n    (post-process-message (str \"Unexpected object value (\" flavor \")\"\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :expected-function-value [_type info]\n  (let [{:keys [soft? path fn]} info]\n    (post-process-message (str \"Expected a function\"\n                               (when soft? (str \" or nil\"))\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))\n                               \", got <\" (goog/typeOf fn) \"> instead\"))))\n\n(defmethod runtime-message :missing-object-key [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Missing expected object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :object-key-not-writable [_type info]\n  (let [{:keys [key path frozen?]} info]\n    (post-process-message (str \"Object key '\" key \"' is not writable\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               (when frozen? (str \" because the object is frozen\"))))))\n\n(defmethod runtime-message :object-is-sealed [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is sealed\"))))\n\n(defmethod runtime-message :object-is-frozen [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is frozen\"))))\n\n(defmethod runtime-message :invalid-selector [_type]\n  (post-process-message \"Invalid selector\"))\n\n(defmethod runtime-message :unexpected-empty-selector [_type]\n  (post-process-message (str \"Unexpected empty selector\")))\n\n(defmethod runtime-message :unexpected-punching-selector [_type]\n  (post-process-message (str \"Unexpected punching selector (\\\"!\\\" makes sense only with oset!)\")))\n\n(defmethod runtime-message :unexpected-soft-selector [_type]\n  (post-process-message (str \"Unexpected soft selector (\\\"?\\\" does not make sense with oset!)\")))\n"],"mappings":"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","names":["oops.messages/post-process-message","msg","js/oops","js/oops.messages","js/oops.messages.runtime-message","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__12854","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","hierarchy__4528__auto__","method-table__4524__auto__","prefer-table__4525__auto__","method-cache__4526__auto__","cached-hierarchy__4527__auto__","oops.messages/runtime-message","type","map__12855","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","info","flavor","cljs.core/empty?","path","map__12857","soft?","goog/typeOf","fn","map__12859","key","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","map__12861","frozen?","map__12863","map__12865"]}