{"version":3,"sources":["clojure/test/check/random/longs.cljs"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Internal namespace, wrapping some goog.math.Long functionality.\"}\n  clojure.test.check.random.longs\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.longs.bit-count-impl :as bit-count]\n            [goog.math.Long :as long]))\n\n\n(defn unsigned-bit-shift-right\n  [x n]\n  (.shiftRightUnsigned x n))\n\n(defn +\n  [x y]\n  (.add x y))\n\n(defn *\n  [x y]\n  (.multiply x y))\n\n(defn bit-xor\n  [x y]\n  (.xor x y))\n\n(defn bit-or\n  [x y]\n  (.or x y))\n\n(defn from-string\n  [s radix]\n  (long/fromString s radix))\n\n(defn from-number\n  [x]\n  (long/fromNumber x))\n\n(defn ->long\n  \"Coerces to long, or returns nil if not possible.\"\n  [x]\n  (cond (number? x)\n        (long/fromNumber x)\n\n        (instance? goog.math.Long x)\n        x))\n\n(def ONE (long/getOne))\n\n(def bit-count bit-count/bit-count)\n"],"mappings":";;;;AAkBA,AAAA,AAAMA,AACH,AAAE;AADL,AAEE,AAAqBC,AAAEC;;AAEzB,AAAA,AAAMC,AACH,AAAE;AADL,AAEE,AAAMF,AAAEG;;AAEV,AAAA,AAAMC,AACH,AAAE;AADL,AAEE,AAAWJ,AAAEG;;AAEf,AAAA,AAAME,AACH,AAAE;AADL,AAEE,AAAML,AAAEG;;AAEV,AAAA,AAAMG,AACH,AAAE;AADL,AAEE,AAAKN,AAAEG;;AAET,AAAA,AAAMI,AACH,AAAE;AADL,AAEE,AAACC,AAAgBC,AAAEC;;AAErB,AAAA,AAAMC,AACH;AADH,AAEE,AAACC,AAAgBZ;;AAEnB;;;AAAA,AAAMa,AAEH;AAFH,AAGE,AAAM,AAASb;AACT,AAACY,AAAgBZ;;AADvB,AAGM,AAAWc,AAAed;AAC1BA;;AAJN;;;;AAMF,AAAKe,AAAI,AAACC;AAEV,AAAKC,AAAUC","names":["clojure.test.check.random.longs/unsigned-bit-shift-right","x","n","clojure.test.check.random.longs/+","y","clojure.test.check.random.longs/*","clojure.test.check.random.longs/bit-xor","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/from-string","goog.math.Long/fromString","s","radix","clojure.test.check.random.longs/from-number","goog.math.Long/fromNumber","clojure.test.check.random.longs/->long","goog.math/Long","clojure.test.check.random.longs/ONE","goog.math.Long/getOne","clojure.test.check.random.longs/bit-count","clojure.test.check.random.longs.bit-count-impl/bit-count"]}