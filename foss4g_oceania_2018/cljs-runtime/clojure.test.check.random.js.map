{"version":3,"sources":["clojure/test/check/random.cljs"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n  clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n        (cond-> z\n          (> 24 (-> z\n                    (bxoubsr 1)\n                    (bit-count)))\n          (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n"],"mappings":"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","names":["clojure.test.check.random/rand-long","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","clojure.test.check.random/rand-double","clojure.test.check.random/split","clojure.test.check.random/split-n","clojure.test.check.random/IRandom","rng","n","clojure.test.check.random/hex-long","clojure.test.check.random.longs/from-string","s","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","G__10992","z","G__10994","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","cljs.core/-write","writer__4291__auto__","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__11003","cljs.core/transient","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","n-dec","cljs.core/count","ret","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","or__4047__auto__","clojure.test.check.random.longs/->long","seed","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.test.check.random/next-rng","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/Date","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","a","p__11010","map__11011","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11014","r1","r2","G__11018","clojure.test.check.random/make-random","js/Error"]}