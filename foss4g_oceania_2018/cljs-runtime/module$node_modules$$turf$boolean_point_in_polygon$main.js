shadow$provide.module$node_modules$$turf$boolean_point_in_polygon$main=function(global,process,require,module,exports,shadow$shims){function booleanPointInPolygon(point,polygon,options){options=options||{};if("object"!==typeof options)throw Error("options is invalid");options=options.ignoreBoundary;if(!point)throw Error("point is required");if(!polygon)throw Error("polygon is required");point=invariant.getCoord(point);var polys=invariant.getCoords(polygon),bbox=polygon.bbox;if(bbox&&!1===(bbox[0]<=
point[0]&&bbox[1]<=point[1]&&bbox[2]>=point[0]&&bbox[3]>=point[1]))return!1;"Polygon"===(polygon.geometry?polygon.geometry.type:polygon.type)&&(polys=[polys]);polygon=0;for(bbox=!1;polygon<polys.length&&!bbox;polygon++)if(inRing(point,polys[polygon][0],options)){for(var inHole=!1,k=1;k<polys[polygon].length&&!inHole;)inRing(point,polys[polygon][k],!options)&&(inHole=!0),k++;inHole||(bbox=!0)}return bbox}function inRing(pt,ring,ignoreBoundary){var isInside=!1;ring[0][0]===ring[ring.length-1][0]&&ring[0][1]===
ring[ring.length-1][1]&&(ring=ring.slice(0,ring.length-1));for(var i=0,j=ring.length-1;i<ring.length;j=i++){var xi=ring[i][0],yi=ring[i][1],xj=ring[j][0];j=ring[j][1];if(0===pt[1]*(xi-xj)+yi*(xj-pt[0])+j*(pt[0]-xi)&&0>=(xi-pt[0])*(xj-pt[0])&&0>=(yi-pt[1])*(j-pt[1]))return!ignoreBoundary;yi>pt[1]!==j>pt[1]&&pt[0]<(xj-xi)*(pt[1]-yi)/(j-yi)+xi&&(isInside=!isInside)}return isInside}var invariant=require("module$node_modules$$turf$invariant$main");module.exports=booleanPointInPolygon;module.exports.default=
booleanPointInPolygon}
//# sourceMappingURL=module$node_modules$$turf$boolean_point_in_polygon$main.js.map
