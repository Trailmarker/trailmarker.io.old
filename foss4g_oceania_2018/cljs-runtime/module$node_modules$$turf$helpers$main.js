shadow$provide.module$node_modules$$turf$helpers$main=function(global,process,require,module,exports,shadow$shims){function feature(geometry,properties,options){options=options||{};if(!isObject(options))throw Error("options is invalid");var bbox=options.bbox;options=options.id;if(void 0===geometry)throw Error("geometry is required");if(properties&&properties.constructor!==Object)throw Error("properties must be an Object");bbox&&validateBBox(bbox);options&&validateId(options);var feat={type:"Feature"};
options&&(feat.id=options);bbox&&(feat.bbox=bbox);feat.properties=properties||{};feat.geometry=geometry;return feat}function point(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");if(!Array.isArray(coordinates))throw Error("coordinates must be an Array");if(2>coordinates.length)throw Error("coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw Error("coordinates must contain numbers");return feature({type:"Point",
coordinates:coordinates},properties,options)}function polygon(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(4>ring.length)throw Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var j=0;j<ring[ring.length-1].length;j++){if(0===i&&0===j&&!isNumber(ring[0][0])||!isNumber(ring[0][1]))throw Error("coordinates must contain numbers");if(ring[ring.length-1][j]!==ring[0][j])throw Error("First and last Position are not equivalent.");
}}return feature({type:"Polygon",coordinates:coordinates},properties,options)}function lineString(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");if(2>coordinates.length)throw Error("coordinates must be an array of two or more positions");if(!isNumber(coordinates[0][1])||!isNumber(coordinates[0][1]))throw Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:coordinates},properties,options)}function featureCollection(features,
options){options=options||{};if(!isObject(options))throw Error("options is invalid");var bbox=options.bbox;options=options.id;if(!features)throw Error("No features passed");if(!Array.isArray(features))throw Error("features must be an Array");bbox&&validateBBox(bbox);options&&validateId(options);var fc={type:"FeatureCollection"};options&&(fc.id=options);bbox&&(fc.bbox=bbox);fc.features=features;return fc}function multiLineString(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");
return feature({type:"MultiLineString",coordinates:coordinates},properties,options)}function multiPoint(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");return feature({type:"MultiPoint",coordinates:coordinates},properties,options)}function multiPolygon(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:coordinates},properties,options)}function radiansToLength(radians,units){if(void 0===
radians||null===radians)throw Error("radians is required");if(units&&"string"!==typeof units)throw Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw Error(units+" units is invalid");return radians*factor}function lengthToRadians(distance,units){if(void 0===distance||null===distance)throw Error("distance is required");if(units&&"string"!==typeof units)throw Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw Error(units+" units is invalid");
return distance/factor}function radiansToDegrees(radians){if(null===radians||void 0===radians)throw Error("radians is required");return radians%(2*Math.PI)*180/Math.PI}function isNumber(num){return!isNaN(num)&&null!==num&&!Array.isArray(num)}function isObject(input){return!!input&&input.constructor===Object}function validateBBox(bbox){if(!bbox)throw Error("bbox is required");if(!Array.isArray(bbox))throw Error("bbox must be an Array");if(4!==bbox.length&&6!==bbox.length)throw Error("bbox must be an Array of 4 or 6 numbers");
bbox.forEach(function(num){if(!isNumber(num))throw Error("bbox must only contain numbers");})}function validateId(id){if(!id)throw Error("id is required");if(-1===["string","number"].indexOf(typeof id))throw Error("id must be a number or a string");}Object.defineProperty(exports,"__esModule",{value:!0});var factors={meters:6371008.8,metres:6371008.8,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,
nauticalmiles:6371008.8/1852,inches:6371008.8*39.37,yards:6371008.8/1.0936,feet:2.0902260511392E7,radians:1,degrees:57.22891354143274};global={meters:1,metres:1,millimeters:1E3,millimetres:1E3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/6371008.8,degrees:1/111325};var areaFactors={meters:1,metres:1,millimeters:1E6,millimetres:1E6,centimeters:1E4,centimetres:1E4,kilometers:1E-6,kilometres:1E-6,
acres:2.47105E-4,miles:3.86E-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};exports.earthRadius=6371008.8;exports.factors=factors;exports.unitsFactors=global;exports.areaFactors=areaFactors;exports.feature=feature;exports.geometry=function(type,coordinates,options){options=options||{};if(!isObject(options))throw Error("options is invalid");options=options.bbox;if(!type)throw Error("type is required");if(!coordinates)throw Error("coordinates is required");if(!Array.isArray(coordinates))throw Error("coordinates must be an Array");
options&&validateBBox(options);switch(type){case "Point":type=point(coordinates).geometry;break;case "LineString":type=lineString(coordinates).geometry;break;case "Polygon":type=polygon(coordinates).geometry;break;case "MultiPoint":type=multiPoint(coordinates).geometry;break;case "MultiLineString":type=multiLineString(coordinates).geometry;break;case "MultiPolygon":type=multiPolygon(coordinates).geometry;break;default:throw Error(type+" is invalid");}options&&(type.bbox=options);return type};exports.point=
point;exports.points=function(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");if(!Array.isArray(coordinates))throw Error("coordinates must be an Array");return featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)};exports.polygon=polygon;exports.polygons=function(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");if(!Array.isArray(coordinates))throw Error("coordinates must be an Array");
return featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)};exports.lineString=lineString;exports.lineStrings=function(coordinates,properties,options){if(!coordinates)throw Error("coordinates is required");if(!Array.isArray(coordinates))throw Error("coordinates must be an Array");return featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)};exports.featureCollection=featureCollection;exports.multiLineString=multiLineString;
exports.multiPoint=multiPoint;exports.multiPolygon=multiPolygon;exports.geometryCollection=function(geometries,properties,options){if(!geometries)throw Error("geometries is required");if(!Array.isArray(geometries))throw Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:geometries},properties,options)};exports.round=function(num,precision){if(void 0===num||null===num||isNaN(num))throw Error("num is required");if(precision&&!(0<=precision))throw Error("precision must be a positive number");
precision=Math.pow(10,precision||0);return Math.round(num*precision)/precision};exports.radiansToLength=radiansToLength;exports.lengthToRadians=lengthToRadians;exports.lengthToDegrees=function(distance,units){return radiansToDegrees(lengthToRadians(distance,units))};exports.bearingToAzimuth=function(bearing){if(null===bearing||void 0===bearing)throw Error("bearing is required");bearing%=360;0>bearing&&(bearing+=360);return bearing};exports.radiansToDegrees=radiansToDegrees;exports.degreesToRadians=
function(degrees){if(null===degrees||void 0===degrees)throw Error("degrees is required");return degrees%360*Math.PI/180};exports.convertLength=function(length,originalUnit,finalUnit){if(null===length||void 0===length)throw Error("length is required");if(!(0<=length))throw Error("length must be a positive number");return radiansToLength(lengthToRadians(length,originalUnit),finalUnit||"kilometers")};exports.convertArea=function(area,originalUnit,finalUnit){if(null===area||void 0===area)throw Error("area is required");
if(!(0<=area))throw Error("area must be a positive number");originalUnit=areaFactors[originalUnit||"meters"];if(!originalUnit)throw Error("invalid original units");finalUnit=areaFactors[finalUnit||"kilometers"];if(!finalUnit)throw Error("invalid final units");return area/originalUnit*finalUnit};exports.isNumber=isNumber;exports.isObject=isObject;exports.validateBBox=validateBBox;exports.validateId=validateId;exports.radians2degrees=function(){throw Error("method has been renamed to `radiansToDegrees`");
};exports.degrees2radians=function(){throw Error("method has been renamed to `degreesToRadians`");};exports.distanceToDegrees=function(){throw Error("method has been renamed to `lengthToDegrees`");};exports.distanceToRadians=function(){throw Error("method has been renamed to `lengthToRadians`");};exports.radiansToDistance=function(){throw Error("method has been renamed to `radiansToLength`");};exports.bearingToAngle=function(){throw Error("method has been renamed to `bearingToAzimuth`");};exports.convertDistance=
function(){throw Error("method has been renamed to `convertLength`");}}
//# sourceMappingURL=module$node_modules$$turf$helpers$main.js.map
