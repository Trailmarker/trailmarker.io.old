shadow$provide.module$node_modules$$turf$boolean_contains$main=function(global,process,require,module,exports,shadow$shims){function _interopDefault(ex){return ex&&"object"===typeof ex&&"default"in ex?ex["default"]:ex}function booleanContains(feature1,feature2){var type1=invariant.getType(feature1),type2=invariant.getType(feature2),geom1=invariant.getGeom(feature1),geom2=invariant.getGeom(feature2);feature1=invariant.getCoords(feature1);feature2=invariant.getCoords(feature2);switch(type1){case "Point":switch(type2){case "Point":return compareCoords(feature1,
feature2);default:throw Error("feature2 "+type2+" geometry not supported");}case "MultiPoint":switch(type2){case "Point":type2=!1;for(type1=0;type1<geom1.coordinates.length;type1++)if(compareCoords(geom1.coordinates[type1],geom2.coordinates)){type2=!0;break}return type2;case "MultiPoint":a:{for(type1=0;type1<geom2.coordinates.length;type1++){type2=!1;for(feature2=0;feature2<geom1.coordinates.length;feature2++)if(compareCoords(geom2.coordinates[type1],geom1.coordinates[feature2])){type2=!0;break}if(!type2){geom1=
!1;break a}}geom1=!0}return geom1;default:throw Error("feature2 "+type2+" geometry not supported");}case "LineString":switch(type2){case "Point":return isPointOnLine(geom2,geom1,{ignoreEndVertices:!0});case "LineString":a:{type1=!1;for(type2=0;type2<geom2.coordinates.length;type2++)if(isPointOnLine({type:"Point",coordinates:geom2.coordinates[type2]},geom1,{ignoreEndVertices:!0})&&(type1=!0),!isPointOnLine({type:"Point",coordinates:geom2.coordinates[type2]},geom1,{ignoreEndVertices:!1})){geom1=!1;
break a}geom1=type1}return geom1;case "MultiPoint":a:{type1=!1;for(type2=0;type2<geom2.coordinates.length;type2++)if(isPointOnLine(geom2.coordinates[type2],geom1,{ignoreEndVertices:!0})&&(type1=!0),!isPointOnLine(geom2.coordinates[type2],geom1)){geom1=!1;break a}geom1=type1?!0:!1}return geom1;default:throw Error("feature2 "+type2+" geometry not supported");}case "Polygon":switch(type2){case "Point":return booleanPointInPolygon(geom2,geom1,{ignoreBoundary:!0});case "LineString":type1=!1;type2=0;feature2=
calcBbox(geom1);feature1=calcBbox(geom2);if(doBBoxOverlap(feature2,feature1)){for(type2;type2<geom2.coordinates.length-1;type2++)if(feature2=geom2.coordinates[type2],feature1=geom2.coordinates[type2+1],booleanPointInPolygon({type:"Point",coordinates:[(feature2[0]+feature1[0])/2,(feature2[1]+feature1[1])/2]},geom1,{ignoreBoundary:!0})){type1=!0;break}geom1=type1}else geom1=!1;return geom1;case "Polygon":a:if(type1=calcBbox(geom1),type2=calcBbox(geom2),doBBoxOverlap(type1,type2)){for(type1=0;type1<
geom2.coordinates[0].length;type1++)if(!booleanPointInPolygon(geom2.coordinates[0][type1],geom1)){geom1=!1;break a}geom1=!0}else geom1=!1;return geom1;case "MultiPoint":a:{for(type1=0;type1<geom2.coordinates.length;type1++)if(!booleanPointInPolygon(geom2.coordinates[type1],geom1,{ignoreBoundary:!0})){geom1=!1;break a}geom1=!0}return geom1;default:throw Error("feature2 "+type2+" geometry not supported");}default:throw Error("feature1 "+type1+" geometry not supported");}}function doBBoxOverlap(bbox1,
bbox2){return bbox1[0]>bbox2[0]||bbox1[2]<bbox2[2]||bbox1[1]>bbox2[1]||bbox1[3]<bbox2[3]?!1:!0}function compareCoords(pair1,pair2){return pair1[0]===pair2[0]&&pair1[1]===pair2[1]}var booleanPointInPolygon=_interopDefault(require("module$node_modules$$turf$boolean_point_in_polygon$main")),calcBbox=_interopDefault(require("module$node_modules$$turf$bbox$main")),isPointOnLine=_interopDefault(require("module$node_modules$$turf$boolean_point_on_line$main")),invariant=require("module$node_modules$$turf$invariant$main");
module.exports=booleanContains;module.exports.default=booleanContains}
//# sourceMappingURL=module$node_modules$$turf$boolean_contains$main.js.map
