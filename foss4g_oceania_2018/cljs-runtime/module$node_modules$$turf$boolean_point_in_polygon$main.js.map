{
"version":3,
"file":"module$node_modules$$turf$boolean_point_in_polygon$main.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@turf/boolean-point-in-polygon/main.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$turf$boolean_point_in_polygon$main\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar invariant = require('@turf/invariant');\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point resides inside the polygon. The polygon can\n * be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon(point, polygon, options) {\n    // Optional parameters\n    options = options || {};\n    if (typeof options !== 'object') throw new Error('options is invalid');\n    var ignoreBoundary = options.ignoreBoundary;\n\n    // validation\n    if (!point) throw new Error('point is required');\n    if (!polygon) throw new Error('polygon is required');\n\n    var pt = invariant.getCoord(point);\n    var polys = invariant.getCoords(polygon);\n    var type = (polygon.geometry) ? polygon.geometry.type : polygon.type;\n    var bbox = polygon.bbox;\n\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) return false;\n\n    // normalize to multipolygon\n    if (type === 'Polygon') polys = [polys];\n\n    for (var i = 0, insidePoly = false; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) insidePoly = true;\n        }\n    }\n    return insidePoly;\n}\n\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) ring = ring.slice(0, ring.length - 1);\n\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0], yi = ring[i][1];\n        var xj = ring[j][0], yj = ring[j][1];\n        var onBoundary = (pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0) &&\n            ((xi - pt[0]) * (xj - pt[0]) <= 0) && ((yi - pt[1]) * (yj - pt[1]) <= 0);\n        if (onBoundary) return !ignoreBoundary;\n        var intersect = ((yi > pt[1]) !== (yj > pt[1])) &&\n        (pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi);\n        if (intersect) isInside = !isInside;\n    }\n    return isInside;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return bbox[0] <= pt[0] &&\n           bbox[1] <= pt[1] &&\n           bbox[2] >= pt[0] &&\n           bbox[3] >= pt[1];\n}\n\nmodule.exports = booleanPointInPolygon;\nmodule.exports.default = booleanPointInPolygon;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","booleanPointInPolygon","point","polygon","options","Error","ignoreBoundary","pt","invariant","getCoord","polys","getCoords","bbox","geometry","type","i","insidePoly","length","inRing","inHole","k","ring","isInside","slice","j","xi","yi","xj","yj","default"]
}
