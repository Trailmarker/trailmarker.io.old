{"version":3,"sources":["io/trailmarker/foss4g_oceania_2018/geojson_spec.cljs"],"sourcesContent":["(ns io.trailmarker.foss4g-oceania-2018.geojson-spec\n  (:require [clojure.test.check]\n            [clojure.spec.alpha :as s]\n            [clojure.spec.gen.alpha :as gen]\n            [oops.core :refer [ocall ocall+]]\n            [\"@turf/kinks\" :as turf-kinks]\n            [\"@turf/boolean-clockwise\" :as turf-boolean-clockwise]\n            [\"@turf/boolean-contains\" :as turf-boolean-contains]\n            [\"@turf/random\" :as turf-random]))\n\n;;{\n;;  \"type\": \"Feature\",\n;;  \"bbox\": [-10.0, -10.0, 10.0, 10.0],\n;;  \"geometry\": {\n;;    \"type\": \"Polygon\",\n;;    \"coordinates\": [\n;;      [\n;;        [-10.0, -10.0],\n;;        [10.0, -10.0],\n;;        [10.0, 10.0],\n;;        [-10.0, -10.0]\n;;      ]\n;;    ]\n;;  }\n;;  //...\n;;}\n\n(defn fixed\n  \"'Fix' a spec, keeping its other attributes but also co\n\n  nstraining it to\n  a specific value.\"\n  [spec? val]\n  (s/with-gen (s/and spec? #(= val %))\n                #(gen/return val)))\n\n(s/def ::latitude (s/and number? #(> % -90.0) #(< % 90.0)))\n\n(s/def ::longitude (s/and number? #(> % -180.0) #(< % 180.0)))\n\n(s/def ::altitude (s/and number? #(> % 0.0)))\n\n(s/def ::position (s/or ::position-2d (s/tuple ::longitude ::latitude)\n                        ::position-3d (s/tuple ::longitude ::latitude ::altitude)))\n\n(s/def ::positions (s/coll-of ::position :kind vector?))\n\n(s/def ::bbox (s/and (s/tuple ::longitude ::latitude\n                              ::longitude ::latitude)\n                     #(>= (get % 3) (get % 1))\n                     #(>= (get % 2) (get % 0))))\n\n(defn no-kinks?\n  \"Return true if a LineString, MultiLineString, Polygon\n  or MultiPolygon has no kinks.\"\n  [geometry]\n  (= 0 (-> geometry\n           clj->js\n           turf-kinks\n           (js->clj :keywordize-keys true)\n           :features\n           count)))\n\n(defn close-ring [positions]\n  (conj positions (first positions)))\n\n(defn no-kinks-ring?\n  [positions]\n  (no-kinks? {:type \"LineString\"\n              :coordinates positions}))\n\n(defn add-if-no-kinks [ps p]\n  (let [ps* (conj ps p)]\n    (if (no-kinks-ring? ps*)\n      ps* ps)))\n\n(defn linear-ring? [positions]\n  (= (first positions) (last positions)))\n\n(defn exterior-ring?\n  \"Return true if a ring runs clockwise and is therefore an exterior ring.\"\n  [ring]\n  (turf-boolean-clockwise (clj->js {:type \"LineString\"\n                                    :coordinates ring})))\n\n(defn contains-interior-ring?\n  \"Return true if an interior ring is contained inside its exterior ring.\"\n  [exterior interior]\n  (let [int #js {:type \"Polygon\"\n                           :coordinates [(reverse interior)]}\n        ext #js {:type \"Polygon\"\n                 :coordinates [exterior]}]\n    (turf-boolean-contains ext int)))\n\n(s/def ::ring\n  (s/with-gen (s/and ::positions linear-ring?)\n    #(gen/fmap (fn [ps] (conj ps (first ps)) (s/gen ::positions)))))\n\n;; No holes and only one ring\n(s/def ::rings\n  (s/tuple ::ring))\n\n(s/def ::type\n  #{\"Point\" \"LineString\" \"Polygon\"\n    \"MultiPoint\" \"MultiLineString\" \"MultiPolygon\"\n    \"GeometryCollection\" \"Feature\" \"FeatureCollection\"})\n\n(s/def ::coordinates\n  (s/or :point ::position\n        :polygon ::rings\n        :line-string ::positions))\n\n(defn point?\n  [pt]\n  (and (= \"Point\" (:type pt))\n       (s/valid? ::position (:coordinates pt))))\n\n(s/def ::point\n  (s/with-gen\n    (s/and (s/keys :req-un [::type ::coordinates])\n           #_point?\n           ) ;; for some reason including this directly causes errors\n    #(gen/fmap (fn [position] {:type \"Point\"\n                               :coordinates position})\n               (s/gen ::position))))\n\n(defn line-string?\n  [ls]\n  (and (= \"LineString\" (:type ls))\n       (s/valid? ::positions (:coordinates ls))))\n\n(s/def ::line-string\n  (s/with-gen\n    (s/and (s/keys :req-un [::type ::coordinates]))\n    #(gen/fmap (fn [ps] {:type \"LineString\"\n                         :coordinates ps})\n               (s/gen ::positions))))\n\n(defn polygon?\n  [p]\n  (and (= \"Polygon\" (:type p))\n       (s/valid? ::rings (:coordinates p))\n       (let [rs (group-by exterior-ring? (:coordinates p))\n             interiors (rs false)\n             exteriors (rs true)]\n         (and\n          ;; Exactly one exterior ring\n          (= 1 (count exteriors))\n          ;; All interior rings contained by exterior ring\n          (every? #(contains-interior-ring? (first exteriors) %) interiors)))))\n\n(defn turf-gen\n  [rand-fn]\n  (fn []\n    (-> (ocall+ turf-random rand-fn)\n        (js->clj :keywordize-keys true)\n        :features\n        first\n        :geometry)))\n\n(def gen-polygon (turf-gen :randomPolygon))\n(def gen-line-string (turf-gen :randomLineString))\n(def gen-point (turf-gen :randomPoint))\n\n(s/def ::polygon\n  (s/with-gen\n    (s/and (s/keys :req-un [::type ::coordinates]))\n    #(gen/fmap (fn [_] (gen-polygon))\n               (s/gen int?))))\n\n\n(s/def ::geometry\n  (s/or :point ::point\n        :line-string ::line-string\n        :polygon ::polygon))\n\n;; Boxed specs for values within a rectangular envelope\n(defn bbox-latitude [bbox]\n  (s/and number? #(>= % (get bbox 1)) #(<= % (get bbox 3))))\n\n(defn bbox-longitude [bbox]\n  (s/and number? #(>= % (get bbox 0)) #(<= % (get bbox 2))))\n\n(defn bbox-position [bbox]\n  (s/tuple (bbox-longitude bbox) (bbox-latitude bbox)))\n\n(defn bbox-positions [bbox]\n  (s/or :point-coordinates (bbox-position bbox)\n        :polygon-coordinates (s/coll-of (bbox-position bbox) :kind vector?)))\n\n(defn bbox-ring [bbox]\n  (s/and (bbox-positions bbox) linear-ring? no-kinks?))\n\n(defn bbox-rings [bbox]\n  (s/tuple (bbox-ring bbox)))\n\n(defn- sample-polygons\n  \"Generate a sequence of GeoJSON polygons.\"\n  []\n  (gen/sample (s/gen ::polygon)))\n"],"mappings":"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","names":["io.trailmarker.foss4g-oceania-2018.geojson-spec/fixed","cljs.spec.alpha/with-gen","cljs.spec.alpha/and-spec-impl","spec?","p1__18224#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","val","cljs.spec.gen.alpha.return$.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha/def-impl","cljs.core/number?","p1__18225#","p1__18226#","p1__18227#","p1__18228#","p1__18229#","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__18230","cljs.core/vector?","p1__18231#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p1__18232#","io.trailmarker.foss4g-oceania-2018.geojson-spec/no-kinks?","geometry","cljs.core/clj->js","js/module$node_modules$$turf$kinks$main","G__18233","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/count","io.trailmarker.foss4g-oceania-2018.geojson-spec/close-ring","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","positions","cljs.core/first","io.trailmarker.foss4g-oceania-2018.geojson-spec/no-kinks-ring?","io.trailmarker.foss4g-oceania-2018.geojson-spec/add-if-no-kinks","ps","p","ps*","io.trailmarker.foss4g-oceania-2018.geojson-spec/linear-ring?","cljs.core/last","io.trailmarker.foss4g-oceania-2018.geojson-spec/exterior-ring?","G__18234","js/module$node_modules$$turf$boolean_clockwise$main","ring","io.trailmarker.foss4g-oceania-2018.geojson-spec/contains-interior-ring?","cljs.core/reverse","interior","exterior","js/module$node_modules$$turf$boolean_contains$main","ext","int","cljs.spec.gen.alpha.fmap.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$1","io.trailmarker.foss4g-oceania-2018.geojson-spec/point?","and__4036__auto__","pt","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/map-spec-impl","cljs.core/map?","G__18235","cljs.core/contains?","position","io.trailmarker.foss4g-oceania-2018.geojson-spec/line-string?","ls","G__18236","io.trailmarker.foss4g-oceania-2018.geojson-spec/polygon?","cljs.core/group-by","rs","exteriors","cljs.core/every?","p1__18237#","interiors","io.trailmarker.foss4g-oceania-2018.geojson-spec/turf-gen","oops.state/*runtime-state*","oops.state/prepare-state","target-obj-18238","js/Error","*runtime-state*-temp-val__18242","oops.core/get-selector-call-info-dynamically","call-info-18240","oops.core/validate-fn-call-dynamically","fn-18239","oops.state/get-last-access-modifier","*runtime-state*-orig-val__18241","js/module$node_modules$$turf$random$main","rand-fn","io.trailmarker.foss4g-oceania-2018.geojson-spec/gen-polygon","io.trailmarker.foss4g-oceania-2018.geojson-spec/gen-line-string","io.trailmarker.foss4g-oceania-2018.geojson-spec/gen-point","G__18243","cljs.core/int?","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-latitude","p1__18244#","bbox","p1__18245#","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-longitude","p1__18246#","p1__18247#","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-position","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-positions","G__18248","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-ring","io.trailmarker.foss4g-oceania-2018.geojson-spec/bbox-rings","io.trailmarker.foss4g-oceania-2018.geojson-spec/sample-polygons","cljs.spec.gen.alpha.sample.cljs$core$IFn$_invoke$arity$variadic"]}