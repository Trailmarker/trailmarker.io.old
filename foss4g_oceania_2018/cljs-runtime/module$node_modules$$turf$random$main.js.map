{
"version":3,
"file":"module$node_modules$$turf$random$main.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@turf/random/main.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$turf$random$main\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * //=position\n */\nfunction randomPosition(bbox) {\n    if (helpers.isObject(bbox)) bbox = bbox.bbox;\n    if (bbox && !Array.isArray(bbox)) throw new Error('bbox is invalid');\n    if (bbox) return coordInBBox(bbox);\n    else return [lon(), lat()];\n}\n\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * //=points\n */\nfunction randomPoint(count, options) {\n    // Optional parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    if (count === undefined || count === null) count = 1;\n\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        features.push(helpers.point(randomPosition(bbox)));\n    }\n    return helpers.featureCollection(features);\n}\n\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * //=polygons\n */\nfunction randomPolygon(count, options) {\n    // Optional parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_radial_length = options.max_radial_length;\n    if (count === undefined || count === null) count = 1;\n\n    // Validation\n    if (!helpers.isNumber(num_vertices)) num_vertices = 10;\n    if (!helpers.isNumber(max_radial_length)) max_radial_length = 10;\n\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var vertices = [],\n            circle_offsets = Array.apply(null,\n                new Array(num_vertices + 1)).map(Math.random);\n\n        circle_offsets.forEach(sumOffsets);\n        circle_offsets.forEach(scaleOffsets);\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(randomPosition(bbox)));\n        features.push(helpers.polygon([vertices]));\n    }\n\n    function sumOffsets(cur, index, arr) {\n        arr[index] = (index > 0) ? cur + arr[index - 1] : cur;\n    }\n\n    function scaleOffsets(cur) {\n        cur = cur * 2 * Math.PI / circle_offsets[circle_offsets.length - 1];\n        var radial_scaler = Math.random();\n        vertices.push([\n            radial_scaler * max_radial_length * Math.sin(cur),\n            radial_scaler * max_radial_length * Math.cos(cur)\n        ]);\n    }\n\n    return helpers.featureCollection(features);\n}\n\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a line segment can turn from the previous segment.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * //=lineStrings\n */\nfunction randomLineString(count, options) {\n    // Optional parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_length = options.max_length;\n    var max_rotation = options.max_rotation;\n    if (count === undefined || count === null) count = 1;\n\n    // Default parameters\n    if (!helpers.isNumber(num_vertices) || num_vertices < 2) num_vertices = 10;\n    if (!helpers.isNumber(max_length)) max_length = 0.0001;\n    if (!helpers.isNumber(max_rotation)) max_rotation = Math.PI / 8;\n\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var startingPoint = randomPosition(bbox);\n        var vertices = [startingPoint];\n        for (var j = 0; j < num_vertices - 1; j++) {\n            var priorAngle = (j === 0) ?\n                Math.random() * 2 * Math.PI :\n                Math.tan(\n                    (vertices[j][1] - vertices[j - 1][1]) /\n              (vertices[j][0] - vertices[j - 1][0])\n                );\n            var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n            var distance = Math.random() * max_length;\n            vertices.push([\n                vertices[j][0] + distance * Math.cos(angle),\n                vertices[j][1] + distance * Math.sin(angle)\n            ]);\n        }\n        features.push(helpers.lineString(vertices));\n    }\n\n    return helpers.featureCollection(features);\n}\n\nfunction vertexToCoordinate(hub) {\n    return function (cur) { return [cur[0] + hub[0], cur[1] + hub[1]]; };\n}\n\nfunction rnd() { return Math.random() - 0.5; }\nfunction lon() { return rnd() * 360; }\nfunction lat() { return rnd() * 180; }\n\nfunction coordInBBox(bbox) {\n    return [\n        (Math.random() * (bbox[2] - bbox[0])) + bbox[0],\n        (Math.random() * (bbox[3] - bbox[1])) + bbox[1]];\n}\n\nexports.randomPosition = randomPosition;\nexports.randomPoint = randomPoint;\nexports.randomPolygon = randomPolygon;\nexports.randomLineString = randomLineString;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","randomPosition","bbox","helpers","isObject","Array","isArray","Error","Math","random","vertexToCoordinate","hub","cur","Object","defineProperty","value","randomPoint","count","options","undefined","features","i","push","point","featureCollection","randomPolygon","sumOffsets","index","arr","scaleOffsets","PI","circle_offsets","length","radial_scaler","vertices","max_radial_length","sin","cos","num_vertices","isNumber","apply","map","forEach","polygon","randomLineString","max_length","max_rotation","startingPoint","j","angle","priorAngle","tan","distance","lineString"]
}
