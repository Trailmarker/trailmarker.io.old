{"version":3,"sources":["oops/helpers.cljs"],"sourcesContent":["(ns oops.helpers\n  \"Various helpers to be available to our code at runtime.\"\n  (:require-macros [oops.helpers :refer [unchecked-aget]]\n                   [oops.debug :refer [debug-assert]]))\n\n(defn is-prototype? [o]\n  (identical? (.-prototype (.-constructor o)) o))\n\n(defn get-constructor [o]\n  (unchecked-aget o \"constructor\"))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (unchecked-aget f \"cljs$lang$type\")))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn to-native-array [coll]\n  (if (array? coll)\n    coll\n    (let [arr (array)]\n      (loop [items (seq coll)]                                                                                                ; note: items is either a seq or nil\n        (if (some? items)\n          (let [item (-first items)]\n            (.push arr item)\n            (recur (next items)))\n          arr)))))\n\n(defn repurpose-error [error msg info]\n  (debug-assert (instance? js/Error error))\n  (debug-assert (string? msg))\n  (set! (.-message error) msg)\n  (specify! error\n    IPrintWithWriter                                                                                                          ; nice to have for cljs-devtools and debug printing\n    (-pr-writer [_obj writer opts]\n      (-write writer msg)\n      (when (some? info)\n        (-write writer \" \")\n        (pr-writer info writer opts)))))\n\n(defn get-property-descriptor [obj property]\n  (loop [o obj]\n    (when (some? o)\n      (if-some [descriptor (.getOwnPropertyDescriptor js/Object o property)]\n        descriptor\n        (recur (.getPrototypeOf js/Object o))))))\n\n(defn determine-property-non-writable-reason [property-descriptor]\n  ; this gets a bit more tricky...\n  ;\n  ; there are two kinds of property descriptors\n  ; 1) data property descriptors\n  ; 2) accessor property descriptors\n  ; only data descriptors have writable flag present\n  ; see https://abdulapopoola.com/2016/11/21/deep-dive-into-javascript-property-descriptors\n  ;\n  ; we first check for \"writable\" property presence and test it only if it exists\n  ; otherwise we assume accessor property is writable if it has some setter method\n  (if (.hasOwnProperty property-descriptor \"writable\")\n    (if (false? (.-writable property-descriptor))\n      \"data property descriptor has writable=false\")\n    (if (nil? (.-set property-descriptor))\n      \"accessor property descriptor has neither writable flag nor a setter function\")))\n\n(defn is-object-sealed? [obj]\n  (.isSealed js/Object obj))\n\n(defn is-object-frozen? [obj]\n  (.isFrozen js/Object obj))\n\n(defn wrap-data-in-enveloper-if-possible [wrap? data]\n  (or (when wrap?\n        (when-some [devtools (oops.helpers/unchecked-aget goog/global \"devtools\")]\n          (when-some [toolbox (oops.helpers/unchecked-aget devtools \"toolbox\")]\n            (when-some [envelope (oops.helpers/unchecked-aget toolbox \"envelope\")]\n              (when (cljs.core/fn? envelope)\n                (envelope data \"details\"))))))\n      data))\n"],"mappings":";;AAKA,AAAA,AAAMA,AAAe;AAArB,AACE,AAAY,AAAa,AAAeC,AAAIA;;AAE9C,AAAA,AAAMC,AAAiB;AAAvB,AACE,AAAA,AAAgBD;;AAOlB,AAAA,AAAME,AAAY;AAAlB,AACE,AAAA,AAAK,AAACE,AAAcC;AAApB,AAAA,AAAAF;AAAA,AAAA,AACK,AAAK,AAACJ,AAAcM;AADzB,AAAA,AAAAF;AAEK,AAAA,AAAgBE;;AAFrBF;;;AAAAA;;;AAIF,AAAA,AAAMG,AAAgB;AAAtB,AACE,AAAA,AAAK,AAACF,AAAcG;AAApB,AAAA,AAAAJ;AACK,AAACD,AAAW,AAACD,AAAgBM;;AADlCJ;;;AAGF,AAAA,AAAMK,AAAiB;AAAvB,AACE,AAAI,AAACC,AAAOC;AACVA;;AACA,AAAM,AAAI;AAAV,AACE,AAAO,AAAM,AAACC,AAAID;;AAAlB,AACE,AAAI,AAAA,AAAA,AAAOE;AACT,AAAM,AAAK,AAACC,AAAOD;AAAnB,AACE,AAAOE,AAAIC;;AACX,AAAO,AAACC,AAAKJ;;;;AACfE;;;;;;AAEV,AAAA,AAAMG,AAAiB,AAAM,AAAI;AAAjC,AACE;AACA;AACA,AAAM,AAAWC,AAAOC;;AACxB,AAAA,AAAUD;AAAV,AAAA,AAAA,AAAA,AAAAE,AAAAC;;AAAA,AAAA,AAAAD,AAEE;AAAa,AAAK,AAAO;AAAzB,AAAA,AAAA,AAAa;AAAb,AACE,AAACE,AAAOC,AAAOJ;;AACf,AAAM,AAAA,AAAA,AAAOK;AAAb,AACE,AAAA,AAACF,AAAOC;;AACR,AAACE,AAAUD,AAAKD,AAAOG;;AAFzB;;;;;AAJJN;;AAQF,AAAA,AAAMO,AAAyB,AAAI;AAAnC,AACE,AAAO,AAAEC;;AAAT,AACE,AAAM,AAAA,AAAA,AAAO5B;AAAb,AACE,AAAA,AAAqB,AAA2B8B,AAAU9B,AAAE+B;AAA5D,AAAA,AAAA,AAAAF,AAAA;AAEE,AAAO,AAAiBC,AAAU9B;;;;AAFpC,AAAA6B,AAAU;AAAV,AACEG;;;AAFJ;;;;;AAKJ,AAAA,AAAMC,AAAwC;AAA9C,AAWE,AAAI,AAAA,AAAiBC;AACnB,AAAI,AAAQ,AAAYA;AAAxB;;AAAA;;;AAEA,AAAI,AAAA,AAAM,AAAOA;AAAjB;;AAAA;;;;AAGJ,AAAA,AAAMC,AAAmB;AAAzB,AACE,AAAWL,AAAUF;;AAEvB,AAAA,AAAMQ,AAAmB;AAAzB,AACE,AAAWN,AAAUF;;AAEvB,AAAA,AAAMS,AAAoC,AAAM;AAAhD,AACE,AAAA,AAAI,AAAA,AAAME,AACJ,AAAA,AAAqB,AAAA,AAA6BE;AAAlD,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAY;AAAZ,AACE,AAAA,AAAoB,AAAA,AAA6BE;AAAjD,AAAA,AAAA,AAAAF,AAAA;AAAA;;AAAA,AAAAA,AAAY;AAAZ,AACE,AAAA,AAAqB,AAAA,AAA6BG;AAAlD,AAAA,AAAA,AAAAH,AAAA;AAAA;;AAAA,AAAAA,AAAY;AAAZ,AACE,AAAM,AAACI,AAAcC;AAArB,AACE,AAAA,AAAA,AAACA,AAAAA,AAAAA,AAASC,AAAAA;;AADZ;;;;;AAJR;AAAJ,AAAA,AAAAR;AAAAA;;AAMIQ","names":["oops.helpers/is-prototype?","o","oops.helpers/get-constructor","oops.helpers/cljs-type?","and__4036__auto__","goog/isObject","f","oops.helpers/cljs-instance?","value","oops.helpers/to-native-array","cljs.core/array?","coll","cljs.core/seq","items","cljs.core/-first","arr","item","cljs.core/next","oops.helpers/repurpose-error","error","msg","x12606","cljs.core/PROTOCOL_SENTINEL","cljs.core/-write","writer","info","cljs.core/pr-writer","opts","oops.helpers/get-property-descriptor","obj","temp__5459__auto__","js/Object","property","descriptor","oops.helpers/determine-property-non-writable-reason","property-descriptor","oops.helpers/is-object-sealed?","oops.helpers/is-object-frozen?","oops.helpers/wrap-data-in-enveloper-if-possible","or__4047__auto__","wrap?","temp__5461__auto__","goog/global","devtools","toolbox","cljs.core/fn?","envelope","data"]}