{"version":3,"sources":["io/trailmarker/foss4g_oceania_2018/slideshow_map.cljs"],"sourcesContent":["(ns io.trailmarker.foss4g-oceania-2018.slideshow-map\n  (:require [\"leaflet/dist/leaflet\" :as L :refer [Map LatLng TileLayer]]\n            [\"@turf/random\" :as turf-random]\n            [oops.core :refer [ocall ocall+ oget]]))\n\n(declare refresh-map-containers)\n\n(defn create-maps\n  [map-sel]\n  (let [containers (refresh-map-containers map-sel)\n        osm-url \"http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\"]\n    (ocall containers :each\n           (fn [_ container]\n             (let [map (Map. container #js {:zoomControl false\n                                            :attributionControl false})\n                   random-polys (repeatedly #(ocall turf-random :randomPolygon))]\n               (-> map\n                   (ocall :setView (LatLng. 0 0) 2)\n                   (ocall :addLayer (TileLayer. osm-url\n                                                #js {:minZoom 2\n                                                     :maxZoom 19})))\n               (doseq [poly (take 100 random-polys)]\n                 (.addTo (.geoJson L poly) map)))))))\n\n(defn refresh-map-containers\n  [map-sel]\n  (let [cont (ocall (js/$ map-sel) :find \".leaflet-container\")]\n    (when (not= 0 (.-length cont)) (ocall cont :remove))\n    (let [new-cont (js/$ \"<div class=\\\"leaflet-container\\\"></div>\")]\n      (ocall (js/$ map-sel) :append new-cont)\n      new-cont)))\n"],"mappings":";;;;;AAKA,AAAA,AAEA,AAAA,AAAMA,AACH;AADH,AAEE,AAAM,AAAW,AAACC,AAAAA,AAAAA,AAAuBC,AAAAA;AAAzC,AACM;AADN,AAEE,AAAA,AAAOa;AAAP,AAAA,AAAA,AAAAZ;AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAH,AAAAI;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAI;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAF,AAAA,AACO,AAAK,AAAE;AAAP,AACE,AAAM,AAAI,AAAAM,AAAA,AAAA,AAAA,AAAMC;AAEV,AAAa,AAAA,AAACC;;AAAD,AAAa,AAAA,AAAOO;AAAP,AAAA,AAAA,AAAAtB;AAAA,AAAA,AAAAC,AAAAe,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAH,AAAAiB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAX,AAAAY,AAAA,AAAAV;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA;;AAAA;;;AAAA;;AAAA,AAAA,AAAAnB,AAAAqB;;;AAFhC,AAGME,AACA,AAAA,AACA,AAAA;AADA,AAAA,AAAA,AAAAvB;AAAA,AAAA,AAAAC,AAAAuB,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAH,AAAAyB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAnB,AAAAoB,AAAA,AAAAlB;AAAA,AAAA,AAAA,AAAA,AAAAkB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA,AAAA,AAAgB,AAAAG,AAAA,AAAA;;AAAhB;;;AAAA;;AAAA,AAAA,AAAA9B,AAAA6B;;AACA,AAAA,AAAA,AAAA7B;AAAA,AAAA,AAAAC,AAAA8B,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAH,AAAAgC;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA1B,AAAA2B,AAAA,AAAAzB;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA,AAAiB,AAAAG,AAAA,AAAA,AAAA,AAAYC;;AAA7B;;AAAA;AAAA,AAAA,AAAAtC,AAAAoC;;AAGJ,AAAA,AAAA,AAAAG,AAAa,AAAA,AAACa,AAASC;AAAvB,AAAA;AAAA,AAAA;AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAQ;AAAR,AAAA,AACE,AAAQ,AAAUc,AAAEC,AAAMhC;;AAD5B;AAAA,AAAAoB;AAAAD;AAAAD;AAAA,AAAAD,AAAA;;;;;;;AAAA,AAAA,AAAA,AAAAD,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAAK;AAAA,AAAAC,AAAAD;AAAA;;;;;;;AAAA,AAAA,AAAAE,AAAAP,AAAQ;AAAR,AAAA,AACE,AAAQ,AAAUW,AAAEC,AAAMhC;;AAD5B;AAAA,AAAA,AAAA4B,AAAAR;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;AAVX;;;AAAA;;AAAA,AAAA,AAAA3C,AAAAW;;AAaJ,AAAA,AAAMb,AACH;AADH,AAEE,AAAM,AAAK,AAAA,AAAO,AAACgE,AAAK/D;AAAb,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAuD,AAAA,AAAArD,AAAA;AAAA,AAAA,AAAAH,AAAAyD;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAnD,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAnD,AAAAoD,AAAA,AAAAlD;AAAA,AAAA,AAAA,AAAA,AAAAkD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA,AAAA;;AAAA;;;AAAA;;AAAA,AAAA,AAAA3D,AAAA6D;;AAAX,AACE,AAAM,AAAA,AAACE,AAAO,AAAUC;AAAxB,AAA+B,AAAA,AAAOA;AAAP,AAAA,AAAA,AAAAhE;AAAA,AAAA,AAAAC,AAAAgE,AAAA,AAAA9D,AAAA;AAAA,AAAA,AAAAH,AAAAkE;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA5D,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA5D,AAAA6D,AAAA,AAAA3D;AAAA,AAAA,AAAA,AAAA,AAAA2D,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA;;AAAA;;AAAA;AAAA,AAAA,AAAApE,AAAAsE;;AAA/B;;AACA,AAAM,AAAS,AAAA,AAACR;AAAhB,AACE,AAAA,AAAO,AAACA,AAAK/D;AAAb,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAsE,AAAA,AAAApE,AAAA;AAAA,AAAA,AAAAH,AAAAwE;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAlE,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAAE;;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAAlE,AAAAmE,AAAA,AAAAjE;AAAA,AAAA,AAAA,AAAA,AAAAiE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAD,AAAA,AAA8BG;;AAA9B;;AAAA;AAAA,AAAA,AAAA7E,AAAA4E;;AACAC","names":["io.trailmarker.foss4g-oceania-2018.slideshow-map/create-maps","io.trailmarker.foss4g-oceania-2018.slideshow-map/refresh-map-containers","map-sel","oops.state/*runtime-state*","oops.state/prepare-state","target-obj-17069","js/Error","*runtime-state*-temp-val__17074","oops.core/validate-object-access-dynamically","next-obj-17072","call-info-17071","oops.core/validate-fn-call-dynamically","fn-17070","oops.state/get-last-access-modifier","*runtime-state*-orig-val__17073","containers","js/module$node_modules$leaflet$dist$leaflet.Map","container","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1","target-obj-17093","*runtime-state*-temp-val__17098","next-obj-17096","call-info-17095","fn-17094","*runtime-state*-orig-val__17097","js/module$node_modules$$turf$random$main","map","target-obj-17103","*runtime-state*-temp-val__17108","next-obj-17106","call-info-17105","fn-17104","*runtime-state*-orig-val__17107","js/module$node_modules$leaflet$dist$leaflet.LatLng","target-obj-17099","*runtime-state*-temp-val__17110","next-obj-17102","call-info-17101","fn-17100","*runtime-state*-orig-val__17109","js/module$node_modules$leaflet$dist$leaflet.TileLayer","osm-url","cljs.core/seq","i__17114","count__17113","chunk__17112","seq__17111","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.take.cljs$core$IFn$_invoke$arity$2","random-polys","js/module$node_modules$leaflet$dist$leaflet","poly","target-obj-17075","*runtime-state*-temp-val__17080","next-obj-17078","call-info-17077","fn-17076","*runtime-state*-orig-val__17079","js/$","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cont","target-obj-17081","*runtime-state*-temp-val__17086","next-obj-17084","call-info-17083","fn-17082","*runtime-state*-orig-val__17085","target-obj-17087","*runtime-state*-temp-val__17092","next-obj-17090","call-info-17089","fn-17088","*runtime-state*-orig-val__17091","new-cont"]}