{"version":3,"sources":["clojure/test/check.cljc"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.clojure-test :as ct]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.rose-tree :as rose]\n            [clojure.test.check.impl :refer [get-current-time-millis\n                                             exception-like?]]))\n\n(declare shrink-loop failure)\n\n(defn- make-rng\n  [seed]\n  (if seed\n    [seed (random/make-random seed)]\n    (let [non-nil-seed (get-current-time-millis)]\n      [non-nil-seed (random/make-random non-nil-seed)])))\n\n(defn- complete\n  [property num-trials seed]\n  (ct/report-trial property num-trials num-trials)\n  {:result true :num-tests num-trials :seed seed})\n\n(defn- not-falsey-or-exception?\n  \"True if the value is not falsy or an exception\"\n  [value]\n  (and value (not (exception-like? value))))\n\n(defn quick-check\n  \"Tests `property` `num-tests` times.\n  Takes optional keys `:seed` and `:max-size`. The seed parameter\n  can be used to re-run previous tests, as the seed used is returned\n  after a test is run. The max-size can be used to control the 'size'\n  of generated values. The size will start at 0, and grow up to\n  max-size, as the number of tests increases. Generators will use\n  the size parameter to bound their growth. This prevents, for example,\n  generating a five-thousand element vector on the very first test.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n      (quick-check 100 p)\n  \"\n  [num-tests property & {:keys [seed max-size] :or {max-size 200}}]\n  (let [[created-seed rng] (make-rng seed)\n        size-seq (gen/make-size-range-seq max-size)]\n    (loop [so-far 0\n           size-seq size-seq\n           rstate rng]\n      (if (== so-far num-tests)\n        (complete property num-tests created-seed)\n        (let [[size & rest-size-seq] size-seq\n              [r1 r2] (random/split rstate)\n              result-map-rose (gen/call-gen property r1 size)\n              result-map (rose/root result-map-rose)\n              result (:result result-map)\n              args (:args result-map)]\n          (if (not-falsey-or-exception? result)\n            (do\n              (ct/report-trial property so-far num-tests)\n              (recur (inc so-far) rest-size-seq r2))\n            (failure property result-map-rose so-far size created-seed)))))))\n\n(defn- smallest-shrink\n  [total-nodes-visited depth smallest]\n  {:total-nodes-visited total-nodes-visited\n   :depth depth\n   :result (:result smallest)\n   :smallest (:args smallest)})\n\n(defn- shrink-loop\n  \"Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\"\n  [rose-tree]\n  (let [shrinks-this-depth (rose/children rose-tree)]\n    (loop [nodes shrinks-this-depth\n           current-smallest (rose/root rose-tree)\n           total-nodes-visited 0\n           depth 0]\n      (if (empty? nodes)\n        (smallest-shrink total-nodes-visited depth current-smallest)\n        (let [[head & tail] nodes\n              result (:result (rose/root head))]\n          (if (not-falsey-or-exception? result)\n            ;; this node passed the test, so now try testing its right-siblings\n            (recur tail current-smallest (inc total-nodes-visited) depth)\n            ;; this node failed the test, so check if it has children,\n            ;; if so, traverse down them. If not, save this as the best example\n            ;; seen now and then look at the right-siblings\n            ;; children\n            (if-let [children (seq (rose/children head))]\n              (recur children (rose/root head) (inc total-nodes-visited) (inc depth))\n              (recur tail (rose/root head) (inc total-nodes-visited) depth))))))))\n\n(defn- failure\n  [property failing-rose-tree trial-number size seed]\n  (let [root (rose/root failing-rose-tree)\n        result (:result root)\n        failing-args (:args root)]\n\n    (ct/report-failure property result trial-number failing-args)\n\n    {:result result\n     :seed seed\n     :failing-size size\n     :num-tests (inc trial-number)\n     :fail (vec failing-args)\n     :shrunk (shrink-loop failing-rose-tree)}))\n"],"mappings":"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","names":["clojure.test.check/make-rng","seed","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1","clojure.test.check.impl/get-current-time-millis","non-nil-seed","clojure.test.check/complete","clojure.test.check.clojure-test/report-trial","property","num-trials","clojure.test.check/not-falsey-or-exception?","and__4036__auto__","value","clojure.test.check.impl/exception-like?","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","clojure.test.check/quick-check","argseq__4648__auto__","p__11332","map__11333","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/first","seq11329","cljs.core/next","self__4628__auto__","G__11330","G__11331","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11335","clojure.test.check.generators/make-size-range-seq","max-size","size-seq","rng","so-far","num-tests","created-seed","cljs.core/seq","vec__11338","seq__11339","first__11340","vec__11341","clojure.test.check.random/split","rstate","clojure.test.check.generators/call-gen","r1","size","clojure.test.check.rose-tree/root","result-map-rose","result-map","result","rest-size-seq","r2","clojure.test.check/failure","clojure.test.check/smallest-shrink","total-nodes-visited","depth","smallest","clojure.test.check/shrink-loop","clojure.test.check.rose-tree/children","rose-tree","shrinks-this-depth","cljs.core/empty?","nodes","current-smallest","vec__11347","seq__11348","first__11349","head","tail","temp__5455__auto__","children","failing-rose-tree","root","clojure.test.check.clojure-test/report-failure","trial-number","failing-args","cljs.core/vec"]}