shadow$provide.module$node_modules$$turf$invariant$main=function(global,process,require,module,exports,shadow$shims){function containsNumber(coordinates){if(1<coordinates.length&&helpers.isNumber(coordinates[0])&&helpers.isNumber(coordinates[1]))return!0;if(Array.isArray(coordinates[0])&&coordinates[0].length)return containsNumber(coordinates[0]);throw Error("coordinates must only contain numbers");}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("module$node_modules$$turf$helpers$main");
exports.getCoord=function(coord){if(!coord)throw Error("coord is required");if("Feature"===coord.type&&null!==coord.geometry&&"Point"===coord.geometry.type)return coord.geometry.coordinates;if("Point"===coord.type)return coord.coordinates;if(Array.isArray(coord)&&2<=coord.length&&void 0===coord[0].length&&void 0===coord[1].length)return coord;throw Error("coord must be GeoJSON Point or an Array of numbers");};exports.getCoords=function(coords){if(!coords)throw Error("coords is required");if("Feature"===
coords.type&&null!==coords.geometry)return coords.geometry.coordinates;if(coords.coordinates)return coords.coordinates;if(Array.isArray(coords))return coords;throw Error("coords must be GeoJSON Feature, Geometry Object or an Array");};exports.containsNumber=containsNumber;exports.geojsonType=function(value,type,name){if(!type||!name)throw Error("type and name required");if(!value||value.type!==type)throw Error("Invalid input to "+name+": must be a "+type+", given "+value.type);};exports.featureOf=
function(feature,type,name){if(!feature)throw Error("No feature passed");if(!name)throw Error(".featureOf() requires a name");if(!feature||"Feature"!==feature.type||!feature.geometry)throw Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type);};exports.collectionOf=function(featureCollection,type,name){if(!featureCollection)throw Error("No featureCollection passed");
if(!name)throw Error(".collectionOf() requires a name");if(!featureCollection||"FeatureCollection"!==featureCollection.type)throw Error("Invalid input to "+name+", FeatureCollection required");for(var i=0;i<featureCollection.features.length;i++){var feature=featureCollection.features[i];if(!feature||"Feature"!==feature.type||!feature.geometry)throw Error("Invalid input to "+name+", Feature with geometry required");if(!feature.geometry||feature.geometry.type!==type)throw Error("Invalid input to "+
name+": must be a "+type+", given "+feature.geometry.type);}};exports.getGeom=function(geojson){if(!geojson)throw Error("geojson is required");if(void 0!==geojson.geometry)return geojson.geometry;if(geojson.coordinates||geojson.geometries)return geojson;throw Error("geojson must be a valid Feature or Geometry Object");};exports.getGeomType=function(){throw Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType");};exports.getType=function(geojson,name){if(!geojson)throw Error((name||
"geojson")+" is required");if(geojson.geometry&&geojson.geometry.type)return geojson.geometry.type;if(geojson.type)return geojson.type;throw Error((name||"geojson")+" is invalid");}}
//# sourceMappingURL=module$node_modules$$turf$invariant$main.js.map
